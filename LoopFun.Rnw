\documentclass[xcolor=table,      handout ,    xcolor=dvipsnames]{beamer} % , handout, draft
\usetheme{Madrid} % Madrid, Warsaw, Berlin
\usecolortheme{beaver}

\usepackage[latin1]{inputenc} % windows
%\usepackage[utf8]{inputenc} %linux
\usepackage[T1]{fontenc} % for textbackslash
\usepackage[german, english]{babel}
\usepackage{float} % placing floats (table and figures) where they should be
\usepackage{lmodern} % make tiny font shape warnings within the beamer class diappear
\usepackage{tabu, multirow, url, hyperref, textcomp, amsmath, listings, datetime, graphicx, booktabs, xcolor, multicol, setspace}
\usepackage[absolute,overlay,showboxes]{textpos}
\usepackage{wasysym}
\usepackage{fontawesome}

\hypersetup{pdfstartview={XYZ null null 1}}
\hypersetup{colorlinks=true, linkcolor=blue, urlcolor=blue}

\setbeamertemplate{footline}[text line]{%
  \parbox{\linewidth}{\vspace*{-8pt}
  \href{https://github.com/brry/course\#slides}{github.com/brry/course} \hfill
  \hyperlink{toc}{TOC} ~~ \insertframenumber / \inserttotalframenumber~~~~~~~~~}}
\setbeamertemplate{navigation symbols}[only frame symbol]

\beamersetleftmargin{0.3cm}
\beamersetrightmargin{0.3cm}

% Reduce spacing in table of contents (toc) http://tex.stackexchange.com/questions/51452
\usepackage{etoolbox}
\makeatletter
\patchcmd{\beamer@sectionintoc}{\vskip1.5em}{\vskip0.1em}{}{} % vskip0.5em
\makeatother

% Remove Bullets and Numbers in TOC: http://tex.stackexchange.com/questions/54656
\setbeamertemplate{sections/subsections in toc}[default]

% white letters in enumerate bullet points
%\definecolor{stupidblue}{RGB}{51,51,178}
\setbeamercolor{item projected}{fg=white}%fg=blue,bg=red!75!black} % fg=white , bg=stupidblue
\setbeamercolor{frametitle}{fg=black}
% Block title color
\setbeamercolor{block title}{fg=white}%fg=blue,bg=red!75!black} % white
%\setbeamertemplate{item projected}[square]


% define an environment for the exercises
\newcounter{exercisecount}
\setcounter{exercisecount}{0}
\newenvironment{exercise}[1]
{% This is the begin code
\stepcounter{exercisecount}
\begin{block}{Exercise \arabic{exercisecount}: #1}
}
{% This is the end code
\end{block} }

\resetcounteronoverlays{exercisecount}

% format inline R command names in blue courier and lightgrey background:
\newcommand{\rcode}[1]{\texttt{\textcolor{Blue}{#1}}}
\newcommand{\key}[1]{\colorbox{gray!30}{\texttt{\textcolor{Blue}{#1}}}}


% links to files
\newcommand{\datalinkRaw}[1]{\href{https://raw.githubusercontent.com/brry/course/master/data/#1}{#1}}
\newcommand{\datalinkBlob}[1]{\href{https://github.com/brry/course/blob/master/data/#1}{#1}}
\newcommand{\datalinkText}[1]{\href{https://github.com/brry/course/blob/master/data/#1}{#1} 
                            {\footnotesize \textit{(rightclick \textbf{Raw}, save as)}}}
                           
% Format month with leading zero:
\newcommand{\leadingzero}[1]{\ifnum #1<10 0\the#1\else\the#1\fi}

% "#' " for doc files:
\newcommand{\doc}{\#\textquotesingle~}

% remove empty lines between code and output. apparently hard to get rid of without turning off syntax highlighting


%------------------------------------------------------------%
%------------------------------------------------------------%
\begin{document}
%------------------------------------------------------------%
%------------------------------------------------------------%

\AtBeginSection[]
{
\begin{frame}%[shrink]
{Outline}
\scriptsize
\tableofcontents[sectionstyle=show/shaded, subsectionstyle=show/shaded/hide]
\end{frame}
}

%\def\newblock{}	% beamer---natbib bugfix

<<setup, include=FALSE>>=
library(knitr)
# install packages, if not available
packinst <- function(n) if(!requireNamespace(n, quietly=TRUE)) install.packages(n)
dummy <- sapply(c("berryFunctions", "numbers", "TeachingDemos", "devtools",
                  "microbenchmark", "zoo", "extremeStat", "nortest", "xts",
                  "maptools", "rgeos", "sp", "geoR"), packinst)

# set global chunk options   maybe use   out.width='.55\\linewidth'
opts_chunk$set(fig.path='./fig/', fig.align='center', fig.show='hold', out.width='\\textwidth', fig.height=3, fig.width=6, cache=TRUE)
options(replace.assign=FALSE, width=50) # width 40 or 60

# set locale to US, which makes sure that eg month names are in english
# Sys.setlocale("LC_ALL", "US") # Windows
Sys.setlocale("LC_ALL","English")
Sys.setenv(LANG = "en") # english errors and warnings

# set r course working directory
# if(.Platform$OS.type=="unix") if(Sys.getenv("username") == "hydro")
# try(setwd("S:/Dropbox/Public/R_course_Berry"))
# if(Sys.info()["nodename"]=="GK-PC-2") setwd("C:/Users/boessenkool/Dropbox/Public/R_course_Berry")

ThemeBerry <- list(highlight="
\\definecolor{fgcolor}{rgb}{0, 0, 0}
\\newcommand{\\hlnum}[1]{\\textcolor[rgb]{0,0,0}{#1}}
\\newcommand{\\hlstr}[1]{\\textcolor[rgb]{0.545,0.137,0.137}{#1}}
\\newcommand{\\hlcom}[1]{\\textcolor[rgb]{0,0.392,0}{\\textit{#1}}}
\\newcommand{\\hlopt}[1]{\\textcolor[rgb]{0,0,0}{#1}}
\\newcommand{\\hlstd}[1]{\\textcolor[rgb]{0,0,0}{#1}}
\\newcommand{\\hlkwa}[1]{\\textcolor[rgb]{1,0,0}{\\textbf{#1}}}
\\newcommand{\\hlkwb}[1]{\\textcolor[rgb]{0,0,0}{#1}}
\\newcommand{\\hlkwc}[1]{\\textcolor[rgb]{1,0,1}{#1}}
\\newcommand{\\hlkwd}[1]{\\textcolor[rgb]{0,0,1}{#1}}
", background="#F5F5F5", foreground="black")
knit_theme$set(ThemeBerry)
rm(ThemeBerry)
@


<<slidebg, echo=F, fig.show='hide', fig.height=4.5>>=
library("berryFunctions")
par(mar=c(0,0,0,0))
plot(1:10, axes=F, type="n", ann=FALSE, xaxs="i", yaxs="i")
set.seed(007)
for(i in 1:50)
  {
  x <- seq(1,10, length=sample(10:100,1))
  y <- rescale(cumsum(rnorm(length(x)+30))[-(1:30)], -1, 13)
  lines(x, y, col=addFade(sample(colors(),1), 0.1), lwd=2)
  }
@

{\usebackgroundtemplate{\includegraphics[width=\paperwidth]{fig/slidebg-1.pdf}}
\begin{frame}
\begin{center}
    \begin{columns}
    \column{15em}
    \begin{block}{}{\Large ~loops and functions in \includegraphics[width=0.7cm]{externalfig/Rlogo.png}}
    \end{block}
    \end{columns}
\vspace{1em}
Berry Boessenkool, \texttt{berry-b@gmx.de}\\
Jannes Breier, \texttt{jbreier@gfz-potsdam.de}\\[1em]
\href{https://gitext.gfz.de}{gitext URL}\\[1em]
These slides and tasks are a subset of Berry's teaching material at\\
\href{https://github.com/brry/course}{github.com/brry/course}\\[1em]
These slides are licenced under
\href{https://creativecommons.org/licenses/by/4.0}{\includegraphics[width=3em]{externalfig/ccby.png}},\\
so you can use the material freely as long as you cite us.\\[1em]
R installation instructions: \href{https://github.com/brry/course\#install}{github.com/brry/course\#install}\\[2em]
\scriptsize
PDF created on \the\year-\leadingzero{\month}-\leadingzero{\day}, \currenttime\ \\[1em]
\end{center}
\end{frame}
}

%------------------------------------------------------------%

\begin{frame}{Outline}
%%%\hspace{0.9em} \hyperlink{titlepage}{R course Info}\\[0.4em]
\tableofcontents[hideallsubsections]
\label{toc}
\end{frame}

%------------------------------------------------------------%

\begin{frame}{\rcode{print("Hello world!")}}
\begin{itemize}[<+->]
\item Berry Boessenkool $\rightarrow$ Geoecology @ Potsdam University
\item R Fan\onslide<+->atic \onslide<+-> since 2010
\item Developer of \href{https://github.com/brry/rdwd\#rdwd}{\texttt{rdwd}},
 \onslide<+-> Freelance trainer \& consultant \href{https://brry.github.io}{\includegraphics[width=0.5cm]{externalfig/Blogo.png}}\\[2em]
\item Jannes Breier $\rightarrow$ Geoecology @ Potsdam University
\item Berry taught me R in 2013 \smiley{}
\item \href{https://www.linkedin.com/in/jbreier/}{\faLinkedinSquare} Research Software Engineer at GFZ, \href{https://www.gfz-potsdam.de/en/staff/jannes-breier/sec44/}{\includegraphics[width=0.65cm]{externalfig/GFZ.png}} Sec.4.4: Hydrology \\[2em]
\item \alert{If we're proceeding too fast, please interrupt!}
\end{itemize}
\end{frame}

%------------------------------------------------------------%
%------------------------------------------------------------%
\section{For loops}
%------------------------------------------------------------%
%------------------------------------------------------------%

\begin{frame}[fragile]{For loops}
Execute a block of code several times, with different input values.\\
Syntax: ~ \texttt{\alert{for}(aRunningVariable \alert{in} aSequence)\{ doSomething \}}
\pause
Often, i (for index) is used, thus ~~ \texttt{\alert{for}(i \alert{in} 1:n) \rcode{doThis}(i)}
\pause
<<for1, echo=T, eval=F>>=
help("for") # needs quotation marks!
@
\pause
<<for_print, eval=F>>=
print(1:2)
print(1:5)
print(1:9)
@
\pause
This is easier and less prone to human errors with:
\pause
<<for2, echo=T, eval=TRUE, tidy=FALSE>>=
for(i in c(2,5,9) ) { print(1:i) }
@
\end{frame}


%------------------------------------------------------------%

\begin{frame}[fragile]{For loops: fill a vector}
<<for6>>=
v <- vector(mode="numeric", length=20)
v
@
\pause \vspace{-1em}
<<for6b>>=
for(i in 3:17)  {  v[i] <- (i+2)^2  }
@
\pause \vspace{-1em}
<<for6b2, echo=2>>=
options(width=40)
v # this code was executed once for each i
options(width=50)
@
\pause \vspace{-0.5em}
In R, \rcode{for} loops are slow. Always try to vectorize (the best option, not always possible) or use \rcode{lapply} (saves you the initiation of the empty vector, easier to parallize).
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{For loops: execute code multiple times I}
\hspace{5em} $y = f(x, n) = \frac{12.5*n}{(n-1)!}*(\frac{n x}{8})^{(n-1)}*e^{-\frac{n x}{8}}$
<<for3a, echo=F, size="footnotesize">>=
par(mar=c(3,3,1,1), mgp=c(2,0.8,0), las=1)
x <- seq(0,20,0.1)
plot(x, 12.5*10/factorial(10-1)*(x/8*10)^(10-1)*exp(-x/8*10),
     ylab="y  =  f(x, n=10)", type="l", lwd=2)
@

\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{For loops: execute code multiple times II}
\textblockrulecolour{red}
<<for3, echo=-1, size="footnotesize">>=
par(mar=c(3,3,1,1), mgp=c(2,0.8,0), las=1)
x <- seq(0,25,0.1)
plot(x,x, type="n", ylab="y = f(x,n)")
lines(x, 12.5*5/factorial(5-1)*(x/8*5)^(5-1)*exp(-x/8*5), col=2)
lines(x, 12.5*6/factorial(6-1)*(x/8*6)^(6-1)*exp(-x/8*6), col=2)
@
\only<2>{
\begin{textblock*}{0.2cm}(2.6cm,2.2cm)
\vspace{0.9cm} ~
\end{textblock*}
%
\begin{textblock*}{0.2cm}(4.6cm,2.2cm)
\vspace{0.9cm} ~
\end{textblock*}
%
\begin{textblock*}{0.2cm}(6.27cm,2.2cm)
\vspace{0.9cm} ~
\end{textblock*}
%
\begin{textblock*}{0.2cm}(6.93cm,2.2cm)
\vspace{0.9cm} ~
\end{textblock*}
%
\begin{textblock*}{0.2cm}(9.25cm,2.2cm)
\vspace{0.9cm} ~
\end{textblock*}
%
}
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{For loops: execute code multiple times III}
<<for5, echo=-1, size="footnotesize">>=
par(mar=c(3,3,1,1), mgp=c(2,0.8,0), las=1)
x <- seq(0,25,0.1)
plot(x,x, type="n", ylab="y = f(x,n)")
for (n in 5:25)
lines(x, 12.5*n/factorial(n-1)*(x/8*n)^(n-1)*exp(-x/8*n), col=2)
@
\begin{textblock*}{0.2cm}(2.6cm,2.65cm)
\vspace{0.45cm} ~
\end{textblock*}
%
\begin{textblock*}{0.2cm}(4.6cm,2.65cm)
\vspace{0.45cm} ~
\end{textblock*}
%
\begin{textblock*}{0.2cm}(6.27cm,2.65cm)
\vspace{0.45cm} ~
\end{textblock*}
%
\begin{textblock*}{0.2cm}(6.93cm,2.65cm)
\vspace{0.45cm} ~
\end{textblock*}
%
\begin{textblock*}{0.2cm}(9.25cm,2.65cm)
\vspace{0.45cm} ~
\end{textblock*}
%
\end{frame}


%------------------------------------------------------------%

<<stocks_datapreparation, eval=F, echo=FALSE>>=
# Download current datasets:
if(!requireNamespace("quantmod")) install.packages("quantmod")
if(!requireNamespace("pbapply"))  install.packages("pbapply")
dummy <- pbapply::pblapply(c("F","VLKAF", "AMZN","AAPL","GOOG","MSFT"),
   function(x) zoo::write.zoo(x=quantmod::getSymbols(x, auto.assign=FALSE)[,6],
                           file=paste0("data/finance/",x,".txt"), col.names=T))

# read single files to R and merge into one file:
stocks <- lapply(dir("data/finance", full=TRUE),
                  read.table, as.is=TRUE, header=TRUE)
stocks <- Reduce(function(...) merge(..., all=T), stocks)

# Get nicer column names:
names <- sapply(strsplit(colnames(stocks), ".", fix=TRUE),"[", 1)
colnames(stocks) <- c(Index="Date", F="FORD", VLKAF="VOLKSWAGEN",
         AMZN="AMAZON", AAPL="APPLE", GOOG="GOOGLE", MSFT="MICROSOFT")[names]

# Save to disc:
write.table(stocks, file="data/stocks.txt", row.names=F, quote=F)
@

%------------------------------------------------------------%

\begin{frame}[fragile]{For loops exercise}
\begin{exercise}{for loop}
\begin{enumerate}
\item Read \datalinkText{stocks.txt}, so that there are no factors in the data.frame
\item Change the first column type from \texttt{char} to \texttt{date} with \rcode{?as.Date}
\item What do you get with \rcode{plot(stocks[ ,c(1,2)])}? Make it a line graph by setting the argument \texttt{type}.
\item With a \rcode{for} loop, plot each stock time series, i.e. plot the \textit{i}th column over the first column.
\item BONUS 1: Use good annotations (\texttt{main, ylab, xlab})
\item BONUS 2: Turn y axis labels upright (\texttt{las})
\item BONUS 3: With \rcode{par(mfrow...}, set up a two by three panel plot
\end{enumerate}
\end{exercise}
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{For loops exercise solution}
\vspace{-1em}
<<forpanel, size="footnotesize", fig.height=2.8, echo=-3>>=
stocks <- read.table("data/stocks.txt", header=T, stringsAsFactors=FALSE)
stocks$Date <- as.Date(stocks$Date)
par(mfrow=c(2,3), mar=c(2,4,2.5,1), mgp=c(2.5,0.7,0))
for(i in 2:7) plot(stocks[ ,c(1,i)], type="l", main=colnames(stocks)[i], 
                   ylab="Stock value", las=1)
@
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{for -> lapply}
\textbf{l}apply: apply a function to elements of a list (or vector)\\
list: R object containing other objects
\pause \vspace{-1em}
<<for_lapply1, eval=FALSE>>=
files <- dir("../rawdata", pattern="*.csv", full=TRUE)
@
\pause \vspace{-1em}
<<for_lapply2, eval=FALSE>>=
# bad and slow way:
ldfs <- list() # initiate empty list
for(i in 1:length(files))
   ldfs[[i]] <- read.csv(files[i], as.is=TRUE)
@
\pause \vspace{-1em}
<<for_lapply3, eval=FALSE>>=
# much better way: apply function to each file
ldfs <- lapply(X=files, FUN=read.csv, as.is=TRUE)
@
\pause \vspace{-1em}
<<for_lapply7, eval=FALSE>>=
# progress bar with remaining time (+ parallelized!)
library("pbapply")
ldfs <- pblapply(X=files, FUN=read.csv, as.is=TRUE)
ldfs <- pblapply(X=files, FUN=read.csv, as.is=TRUE, cl=8)
@
\end{frame}

%------------------------------------------------------------%
%------------------------------------------------------------%
\section{Functions}
%------------------------------------------------------------%
%------------------------------------------------------------%

\begin{frame}[fragile]{Functions I}
\label{functions1}
\href{http://r4ds.had.co.nz/functions.html}{http://r4ds.had.co.nz/functions.html}\\
\pause
\rcode{?"function"}\\
\pause  Syntax:\\
\rcode{Functionobjectname <- \alert{function}(argument1, argument2, ...) \\
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\{"DoSomething"\}}\\
\pause
<<funct2, echo=T, eval=T, tidy=FALSE>>=
myfunct <- function(grappig)
       {plot(grappig, type="l"); return(grappig*7)  }
@
\pause
After \rcode{return()}ing, the execution of the function is terminated, so it should only be positioned at the end. It can also be left away, the last instruction ("expression") will then be returned.
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{Functions II}
<<funct3>>=
myfunct(   c(5,11,3,7)  )
@
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{Functions with more arguments + default values}
<<funct4, size="small", echo=-1>>=
par(mar=c(4,5,1,1), mgp=c(2.8,0.8,0))
myfunct <- function(x, type="b", ...) plot(x, type=type, ...)
# type="o" is now the default, thus used unless specified
# The ellipsis (...) passes arguments to other functions
myfunct(  c(5,11,3,7) , col="red", las=1)
@
\vspace{-2em}
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{Conditional execution}
Syntax:
\rcode{\alert{if}(this\_is\_true) \{do\_something\}}\\
\pause
\rcode{\alert{if}(this\_is\_true) \{do\_something\} \alert{else} \{do\_other\_thing\}}\\[0.8em]
\pause
If condition == TRUE, then expression1 is evaluated,\\
if condition == FALSE, then expression2 is evaluated.\\[0.8em]
\pause
\begin{columns}
\begin{column}{.40\textwidth}
\texttt{7-3 > 2 \\
\textcolor{blue}{class}(7-3 > 2 ) \\
\textcolor{red}{if}(7-3 > 2) 18  \\
\textcolor{red}{if}(7-3 > 5) 18  \\
\textcolor{red}{if}(7-3 > 5) 18 \textcolor{red}{else} 17 }
\end{column}
\begin{column}{.59\textwidth}
\pause TRUE\\
\pause logical = truth value, boolean\\
\pause Condition is TRUE, so 18 is returned\\
\pause Condition is FALSE, so nothing happens\\
\pause Condition FALSE, so 17 is returned.
\end{column}
\end{columns}
\pause \vspace{0.8em}
<<stopfun, eval=F>>=
if(length(input)>1) 
  stop("length must be 1, not ", length(input))
@
\pause \vspace{-0.3em}
\rcode{stop}: Interrupts function execution and gives error\\
\rcode{warning}: continues but gives warning\\
\rcode{message}: to inform instead of worry the user\\[1em]
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{Exercise: add circles with given radius}
<<circlebasics, echo=-1, fig.height=2.1, fig.width=2.5, out.width="0.4\\textwidth">>=
par(mar=c(2,2,1,1), las=1)
plot(1:10, asp=1) # aspect ratio y/x of graph range
grid(col=1) 
# the next part sould go into a function:
x <- 8 ;  y <- 6 ;  r <-2
p <- seq(0, 2*pi, len=50)
cx <- x+r*cos(p) ;  cy <- y+r*sin(p)
polygon(cx, cy)
@
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{Time to practice programming}
\begin{exercise}{Writing functions} %ex
Write a function that
\begin{enumerate}
  \item - draws a circle with a certain radius at user-specified locations of an existing plot (see last slide).
  \item - uses ellipsis (\rcode{...}) to allow the user to customize the appearance
  \item - checks all the arguments and gives useful warnings if the wrong type of input is provided
  \item - has useful explanations for each argument (documentation)
  \item - has readable indentation, spacing and comments explaining the code
  \item Now let your neighbor use it without explaining how it is to be used (this should be inferred from the code and comments!)
  \item Use your neighbor's function with a vector to draw several circles at once. (unintended use?) What happens?
  \item BONUS: Learn writing packages at \datalinkText{packdev.R}
\end{enumerate}
\end{exercise}
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]
<<exfunsola_1, size="scriptsize", eval=FALSE>>=
# Small helper function drawing circles into existing graphics
circle <- function(
  x, # x-coordinate of points, numeric value of length 1
  y, # ditto for y
  r, # radius of the circle, in the graphic's units
  locnum=100, # number of points on circle (more means smoother but slower)
  ...) # Further Arguments passed to polygon, like col, border, lwd
 {
  
 #
@
\pause \vspace{-2.5em}
<<exfunsola_2, size="scriptsize", eval=FALSE>>=
 # input checking - only one circle can be drawn:
 if(length(x) >1 | length(y) >1 | length(r) >1 | length(locnum) >1)
   {
   warning("Only the first element of the vectors is used.")
   x <- x[1]; y <- y[1]; r <- r[1]; locnum <- locnum[1]
   }

 #
@
\pause \vspace{-2.5em}
<<exfunsola_3, size="scriptsize", eval=FALSE>>= # input checking - is every value numeric?
 if(!is.numeric(x)) stop("x must be numeric, not ", class(x))
 if(!is.numeric(y)) stop("y must be numeric, not ", class(y))
 if(!is.numeric(r)) stop("r must be numeric, not ", class(r))

 #
@
\pause \vspace{-2.5em}
<<exfunsola_4, size="scriptsize", eval=FALSE>>=  
 # prepare circle line coordinates:
 cx <- x+r*cos( seq(0,2*pi,len=locnum) )
 cy <- y+r*sin( seq(0,2*pi,len=locnum) )
 polygon(cx, cy, ...) # actually draw it
 }
# Note: if circles look like ellipsis, use plot(... asp=1)
@
<<circlesdef, echo=FALSE>>=
circle <- function(
x, # x-coordinate of points, numeric value of length 1
y, # ditto for y
r, # radius of the circle, in the graphic's units
locnum=100, # number of points on circle (more means smoother but slower)
...) # Further Arguments passed to polygon, like col, border, lwd
{
## input checking - only one circle can be drawn:
if(length(x) >1 | length(y) >1 | length(r) >1 | length(locnum) >1)
{
warning("Only the first element of the vectors is used.")
x <- x[1]; y <- y[1]; r <- r[1]; locnum <- locnum[1]
}
# if(!is.numeric(x)) stop("x must be numeric, not ", class(x))
if(!is.numeric(y)) stop("y must be numeric, not ", class(y))
if(!is.numeric(r)) stop("r must be numeric, not ", class(r))
# # prepare circle line coordinates:
cx <- x+r*cos( seq(0,2*pi,len=locnum) )
cy <- y+r*sin( seq(0,2*pi,len=locnum) )
polygon(cx, cy, ...) # actually draw it
}
@

\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{Solution for exercise \arabic{exercisecount} II: functions}
<<exfunsolb, echo=-1>>=
par(mar=c(3,3,0,0), las=1)
plot(1:20, type="n", asp=1, cex=2)
circle(5,5, r=3)
circle(15,10, r=4, locnum=12, col=2, border=4, lwd=3)
@
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{Solution for exercise \arabic{exercisecount} III: functions}
<<exfunsolc, echo=-1, size="scriptsize", out.width='0.4\\textwidth'>>=
par(mar=c(3,3,0.5,0.5), las=1, cex=2)  ; plot(1:20, type="n", asp=1)
# can not be vectorized:
x <- sample(1:20, 15) ;  y <- sample(1:20, 15) ; r <- runif(20)*4
circle(x,y,r, col=rgb(1,0.5,0,alpha=0.4), border=NA)
for(i in 1:15) circle(x[i],y[i],r[i], col=rgb(1,0.5,0,alpha=0.4), border=NA)
@
\end{frame}

% ---------------------------

\section{Debugging}

% ---------------------------

\begin{frame}[fragile]{Debugging}
\begin{itemize}[<+->]
\item Your code throws an error.
You didn't call the mentioned function.
Obviously, your code calls some function calling some function calling some function calling [you get the idea] which in the end creates an error.
To trace back this path, you can use \rcode{traceback()}.

\item Now that you know where the error originates from, you set \rcode{options(error=recover)}.
You run your code again, but this time R waits at the level creating an error.
You examine the environment within the function, play around with the objects and internal function code, until the bug has been fixed.
You have just debugged a function.

\item You want to step into the function you are developing at a specific point.
You add \rcode{browser()} at that point of the code.
\end{itemize}
\end{frame}

% ---------------------------

\begin{frame}[fragile]{Debugging: useful functions + Resources}
\begin{tabular}{ll}
\pause source("projectFuns.R") & execute complete file\\
\pause traceback() & find error source in sequence of function calls\\
\pause options(warn=2) & warnings to error. default 0\\
\pause browser() & go into function environment: \rcode{n}, \rcode{s}, \rcode{f}, \rcode{c}, \rcode{Q}\\
\pause \alert{options(error=recover)} & \alert{open interactive session where error occurred}\\
\pause debug(funct) & toggle linewise function execution\\
\pause undebug(funct) & after calling and fixing funct\\
\end{tabular}\\

\pause \vspace{1em}
\href{http://www.biostat.jhsph.edu/~rpeng/docs/R-debug-tools.pdf}{R. Peng (2002): Interactive Debugging Tools in R}\\
\href{https://www.stats.umanitoba.ca/files/statsweb/2011/03/debugging.pdf}{D. Murdoch (2010): Debugging in R}\\
\href{http://adv-r.had.co.nz/Exceptions-Debugging.html}{H. Wickham (2015): Advanced R: debugging}\\
Example: \href{https://www.r-bloggers.com/tracking-down-errors-in-r/}{Pete Werner Blog Post (2013)}
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{Practice debugging, \datalinkText{lsc\_functions.R}}
\begin{exercise}{Debugging}
\begin{enumerate}
\item Load your package and the datasets. Correct the functions until\\
\rcode{lsc(calib\$P, calib\$Q, area=1.6)} returns the result below.
\item BONUS: commit each change to git.
\end{enumerate}
\end{exercise}

<<PQ_lsc, echo=F, warning=F, fig.height=2.8>>=
qpfile <- system.file("extdata/Q_P.txt", package="berryFunctions")
qp <- read.table(qpfile, sep="\t", dec=",", header=TRUE)
calib <- qp[1:90, ]
valid <- qp[-(1:90), ]
lsc_cal <- berryFunctions::lsc(calib$P, calib$Q, area=1.6)
@
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{Solution for exercise \arabic{exercisecount}: Debugging}
\begin{itemize}
\item \rcode{stupid error you can easily remove} - traceback - find location of error - lsc\#73 - just comment it out
\item \rcode{harder to find but still stupid} - traceback - nse\#11 - ditto
\item \rcode{Error in plot: need finite 'ylim' value} - browser/options(error=recover) - lsc\#105 - NAs in Q - range(Q, na.rm=TRUE) - also in other applicable locations
\item \rcode{There were 50 or more warnings} - come from rmse being called in optimization - add argument quietNA (or similar) to lsc that is passed to rmse in lsc\#79
\end{itemize}
\end{frame}

%------------------------------------------------------------%
%------------------------------------------------------------%
\end{document}
%------------------------------------------------------------%
%------------------------------------------------------------%

