\documentclass[xcolor=table,      handout ,    xcolor=dvipsnames]{beamer} % , handout, draft
\usetheme{Madrid} % Madrid, Warsaw, Berlin
\usecolortheme{beaver}

\usepackage[latin1]{inputenc} % windows
%\usepackage[utf8]{inputenc} %linux
\usepackage[T1]{fontenc} % for textbackslash
\usepackage[german, english]{babel}
\usepackage{float} % placing floats (table and figures) where they should be
\usepackage{lmodern} % make tiny font shape warnings within the beamer class diappear
\usepackage{tabu, multirow, url, hyperref, textcomp, amsmath, listings, datetime, graphicx, booktabs, xcolor, multicol, setspace}
\usepackage[absolute,overlay,showboxes]{textpos}
\usepackage{wasysym}
\usepackage{fontawesome}

\hypersetup{pdfstartview={XYZ null null 1}}
\hypersetup{colorlinks=true, linkcolor=blue, urlcolor=blue}

\setbeamertemplate{footline}[text line]{%
  \parbox{\linewidth}{\vspace*{-8pt}
  \href{https://github.com/brry/course\#slides}{github.com/brry/course} \hfill
  \hyperlink{toc}{TOC} ~~ \insertframenumber / \inserttotalframenumber~~~~~~~~~}}
\setbeamertemplate{navigation symbols}[only frame symbol]

\beamersetleftmargin{0.3cm}
\beamersetrightmargin{0.3cm}

% Reduce spacing in table of contents (toc) http://tex.stackexchange.com/questions/51452
\usepackage{etoolbox}
\makeatletter
\patchcmd{\beamer@sectionintoc}{\vskip1.5em}{\vskip0.1em}{}{} % vskip0.5em
\makeatother

% Remove Bullets and Numbers in TOC: http://tex.stackexchange.com/questions/54656
\setbeamertemplate{sections/subsections in toc}[default]

% white letters in enumerate bullet points
%\definecolor{stupidblue}{RGB}{51,51,178}
\setbeamercolor{item projected}{fg=white}%fg=blue,bg=red!75!black} % fg=white , bg=stupidblue
\setbeamercolor{frametitle}{fg=black}
% Block title color
\setbeamercolor{block title}{fg=white}%fg=blue,bg=red!75!black} % white
%\setbeamertemplate{item projected}[square]


% define an environment for the exercises
\newcounter{exercisecount}
\setcounter{exercisecount}{0}
\newenvironment{exercise}[1]
{% This is the begin code
\stepcounter{exercisecount}
\begin{block}{Exercise \arabic{exercisecount}: #1}
}
{% This is the end code
\end{block} }

\resetcounteronoverlays{exercisecount}

% format inline R command names in blue courier and lightgrey background:
\newcommand{\rcode}[1]{\texttt{\textcolor{Blue}{#1}}}
\newcommand{\key}[1]{\colorbox{gray!30}{\texttt{\textcolor{Blue}{#1}}}}


% links to files
\newcommand{\datalinkRaw}[1]{\href{https://raw.githubusercontent.com/brry/course/master/data/#1}{#1}}
\newcommand{\datalinkBlob}[1]{\href{https://github.com/brry/course/blob/master/data/#1}{#1}}
\newcommand{\datalinkText}[1]{\href{https://github.com/brry/course/blob/master/data/#1}{#1} 
                            {\footnotesize \textit{(rightclick \textbf{Raw}, save as)}}}
                           
% Format month with leading zero:
\newcommand{\leadingzero}[1]{\ifnum #1<10 0\the#1\else\the#1\fi}

% "#' " for doc files:
\newcommand{\doc}{\#\textquotesingle~}

% remove empty lines between code and output. apparently hard to get rid of without turning off syntax highlighting


%------------------------------------------------------------%
%------------------------------------------------------------%
\begin{document}
%------------------------------------------------------------%
%------------------------------------------------------------%

\AtBeginSection[]
{
\begin{frame}%[shrink]
{Outline}
\scriptsize
\tableofcontents[sectionstyle=show/shaded, subsectionstyle=show/shaded/hide]
\end{frame}
}

%\def\newblock{}	% beamer---natbib bugfix

<<setup, include=FALSE>>=
library(knitr)
# install packages, if not available
packinst <- function(n) if(!requireNamespace(n, quietly=TRUE)) install.packages(n)
dummy <- sapply(c("berryFunctions", "numbers", "TeachingDemos", "devtools",
                  "microbenchmark", "zoo", "extremeStat", "nortest", "xts",
                  "maptools", "rgeos", "sp", "geoR"), packinst)

# set global chunk options   maybe use   out.width='.55\\linewidth'
opts_chunk$set(fig.path='./fig/', fig.align='center', fig.show='hold', out.width='\\textwidth', fig.height=3, fig.width=6, cache=TRUE)
options(replace.assign=FALSE, width=50) # width 40 or 60

# set locale to US, which makes sure that eg month names are in english
# Sys.setlocale("LC_ALL", "US") # Windows
Sys.setlocale("LC_ALL","English")
Sys.setenv(LANG = "en") # english errors and warnings

# set r course working directory
# if(.Platform$OS.type=="unix") if(Sys.getenv("username") == "hydro")
# try(setwd("S:/Dropbox/Public/R_course_Berry"))
# if(Sys.info()["nodename"]=="GK-PC-2") setwd("C:/Users/boessenkool/Dropbox/Public/R_course_Berry")

ThemeBerry <- list(highlight="
\\definecolor{fgcolor}{rgb}{0, 0, 0}
\\newcommand{\\hlnum}[1]{\\textcolor[rgb]{0,0,0}{#1}}
\\newcommand{\\hlstr}[1]{\\textcolor[rgb]{0.545,0.137,0.137}{#1}}
\\newcommand{\\hlcom}[1]{\\textcolor[rgb]{0,0.392,0}{\\textit{#1}}}
\\newcommand{\\hlopt}[1]{\\textcolor[rgb]{0,0,0}{#1}}
\\newcommand{\\hlstd}[1]{\\textcolor[rgb]{0,0,0}{#1}}
\\newcommand{\\hlkwa}[1]{\\textcolor[rgb]{1,0,0}{\\textbf{#1}}}
\\newcommand{\\hlkwb}[1]{\\textcolor[rgb]{0,0,0}{#1}}
\\newcommand{\\hlkwc}[1]{\\textcolor[rgb]{1,0,1}{#1}}
\\newcommand{\\hlkwd}[1]{\\textcolor[rgb]{0,0,1}{#1}}
", background="#F5F5F5", foreground="black")
knit_theme$set(ThemeBerry)
rm(ThemeBerry)
@


<<slidebg, echo=F, fig.show='hide', fig.height=4.5>>=
library("berryFunctions")
par(mar=c(0,0,0,0))
plot(1:10, axes=F, type="n", ann=FALSE, xaxs="i", yaxs="i")
set.seed(007)
for(i in 1:50)
  {
  x <- seq(1,10, length=sample(10:100,1))
  y <- rescale(cumsum(rnorm(length(x)+30))[-(1:30)], -1, 13)
  lines(x, y, col=addFade(sample(colors(),1), 0.1), lwd=2)
  }
@

{\usebackgroundtemplate{\includegraphics[width=\paperwidth]{fig/slidebg-1.pdf}}
\begin{frame}
\begin{center}
    \begin{columns}
    \column{15em}
    \begin{block}{}{\Large ~loops and functions in~ \includegraphics[width=0.7cm]{externalfig/Rlogo.png}}
    \end{block}
    \end{columns}
\vspace{1em}
Berry Boessenkool, \texttt{berry-b@gmx.de}\\
Jannes Breier, \texttt{jbreier@gfz-potsdam.de}\\[1em]
These slides and tasks are a subset of Berry's teaching material at\\
\href{https://github.com/brry/course}{github.com/brry/course}\\[1em]
These slides are licenced under
\href{https://creativecommons.org/licenses/by/4.0}{\includegraphics[width=3em]{externalfig/ccby.png}},\\
so you can use the material freely as long as you cite us.\\[1em]
R installation instructions: \href{https://github.com/brry/course\#install}{github.com/brry/course\#install}\\[2em]
\scriptsize
PDF created on \the\year-\leadingzero{\month}-\leadingzero{\day}, \currenttime\ \\[1em]
\end{center}
\end{frame}
}

%------------------------------------------------------------%

\begin{frame}{Outline}
%%%\hspace{0.9em} \hyperlink{titlepage}{R course Info}\\[0.4em]
\tableofcontents[hideallsubsections]
\label{toc}
\end{frame}

%------------------------------------------------------------%

\begin{frame}{\rcode{print("Hello world!")}}
\begin{itemize}[<+->]
\item Berry Boessenkool $\rightarrow$ Geoecology @ Potsdam University
\item R Fan\onslide<+->atic \onslide<+-> since 2010
\item Developer of \href{https://github.com/brry/rdwd\#rdwd}{\texttt{rdwd}},
 \onslide<+-> Freelance trainer \& consultant \href{https://brry.github.io}{\includegraphics[width=0.5cm]{externalfig/Blogo.png}}\\[1em]
\item Jannes Breier $\rightarrow$ Geoecology @ Potsdam University
\item Berry taught me R in 2013 \smiley{}
\item \href{https://www.linkedin.com/in/jbreier/}{\faLinkedinSquare} Research Software Engineer at GFZ, \href{https://www.gfz-potsdam.de/en/staff/jannes-breier/sec44/}{\includegraphics[width=0.65cm]{externalfig/GFZ.png}} Sec.4.4: Hydrology \\[1em]
\item \alert{If we're proceeding too fast, please interrupt!}
\end{itemize}
\end{frame}

\iffalse % commenting out Conditions section
%------------------------------------------------------------%
%------------------------------------------------------------%
\section{Conditions}
%------------------------------------------------------------%
%------------------------------------------------------------%

\begin{frame}[fragile]{Conditional execution I}
Syntax for a single logical value:\\
\rcode{\alert{if}(this\_is\_true) \{do\_something\} \alert{else} \{do\_other\_thing\}}\\[\baselineskip]
\pause
Syntax for a vector with several T/F values:\\
\rcode{\alert{ifelse}(condition, expression1, expression2)}\\[\baselineskip]
\pause
If condition == TRUE, then expression1 is evaluated,
if condition == FALSE, then expression2 is evaluated.\\[1em]
\pause
\begin{columns}
\begin{column}{.40\textwidth}
\texttt{7-3 > 2 \\
\textcolor{blue}{class}(7-3 > 2 ) \\
\textcolor{red}{if}(7-3 > 2) 18  \\
\textcolor{red}{if}(7-3 > 5) 18  \\
\textcolor{red}{if}(7-3 > 5) 18 \textcolor{red}{else} 17 }
\end{column}
\begin{column}{.59\textwidth}
\pause TRUE\\
\pause logical = truth value, boolean\\
\pause Condition is TRUE, so 18 is returned\\
\pause Condition is FALSE, so nothing happens\\
\pause Condition FALSE, so 17 is returned.
\end{column}
\end{columns}
%' <<cond1b, eval=FALSE, size="small">>=
%' 7-3 > 2                # TRUE
%' class(7-3 > 2 )        # logical = truth value, boolean
%' if(7-3 > 2) 18         # Condition is TRUE, so 18 is returned
%' if(7-3 > 5) 18         # Condition is FALSE, so nothing happens
%' if(7-3 > 5) 18 else 17 # Cond. F, so 17 is returned.
%' @
%' % onslide doesn't work in a verbatim (fragile) environment
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{Conditional execution II}
<<cond2, echo=TRUE, eval=FALSE, tidy=FALSE>>=
# Several commands must be held together with curly braces:
if(TRUE)
  {
  plot(1:10, main="TRUE in code")
  box("figure", col=4, lwd=3)
  } else
# do something else: plot random numbers
    {
    plot(rnorm(500), main="FALSE in code")
    }
# these last brackets can (but should not) be left away
# indenting code makes it readable for humans

par(mfrow=c(1,2), cex=1, las=1)
@
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{Conditional execution III}
<<cond3, echo=FALSE, eval=TRUE, tidy=FALSE>>=
par(mfrow=c(1,2), cex=1, las=1)
if(TRUE)
  {
  plot(1:10, main="TRUE in code")
  box("figure", col=4, lwd=3)
  } else
    {
    plot(rnorm(500), main="FALSE in code")
    }
if(FALSE)
  {
  plot(1:10, main="TRUE in code")
  box("figure", col=4, lwd=3)
  } else
    {
    plot(rnorm(500), main="FALSE in code")
    }
@
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{Vectorising: \alert{if}(c) e1 \alert{else} e2 ~~~ vs ~~~ \alert{ifelse}(c, e1, e2)}
<<ifelse_vectorized1>>=
v <- c(13, 14, 15, 16, 17)
v>14
@
\pause
<<ifelse_vectorized2>>=
ifelse(v>14, v+10, NA) # can handle vector of input
@
\pause
<<ifelse_vectorized3>>=
if(v>14) v+10 else NA
@
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{Time to practice}
\begin{exercise}{if else - Conditional code execution} %ex
\begin{enumerate}
  \item \rcode{sqrt} returns NaN for the negative values in \rcode{v <- -3:5} and warns about it. With a conditional expression, pass 0 instead of negative values to \rcode{sqrt}.
  \item Construct a statement that checks whether the variable \rcode{input <- 4} is a number smaller than 3. Let it write a useful \rcode{message} to the console (for both cases). Now test it with \rcode{input <- 1.8} and \rcode{input <- -17}.
  \item Now restrict the correct value of input to \emph{positive} numbers <3, i.e. the number must be <3 AND $\geq$ 0.
  \item BONUS 1: What happens if \rcode{input <- "2"} or if \rcode{input <- "b"}?
  \item BONUS 2: Create a character variable that, depending on the result of \rcode{rnorm(1)}, is initiated with probable or unlikely.
  \item BONUS 3: \rcode{replicate} this experiment 1000 times and examine the result with \rcode{table}.
  \item BONUS 4: How could you do this with \rcode{ifelse}?
\end{enumerate}
\end{exercise}
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{Solution for exercise \arabic{exercisecount}.1: if else}
<<excondsol1a, eval=TRUE, size="footnotesize", echo=-1>>=
options(width=80, digits=5)
v <- -3:5
sqrt(v)
@
<<excondsol1b, eval=TRUE, size="footnotesize", echo=-1>>=
options(width=80, digits=5)
ifelse( v >= 0, sqrt(v), 0)
@
<<excondsol1c, eval=TRUE, size="footnotesize", echo=-1>>=
options(width=80, digits=5)
sqrt(ifelse( v >= 0, v, 0))
@
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{Solution for exercise \arabic{exercisecount}.2: if else}
<<excondsol2, eval=TRUE, echo=-1>>=
options(width=80)
input <- 4
if( input >= 3 ) message("Input was wrong.
                         It should be <3") else
                 message("Input OK")

# run it again after
input <- 1.8
input <- -17
@
<<resetopts2, echo=F>>=
options(width=50)
@
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{Solution for exercise \arabic{exercisecount}.3: if else}
<<excondsol3, eval=FALSE>>=
# three different solutions:
if( input >= 3 ) message("Input is > 3") else
if( input < 0 )  message("Input is < 0") else
                 message("Input OK")

if( input >= 3 |  input < 0)
   message("Input outside 0...3") else
   message("Input OK")

if( input > 0  &  input <= 3 )   message("Input OK") else
           message("Input (",input,") outside 0...3")
@
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{Solution for exercise \arabic{exercisecount}.3: if else BONUS}
<<ifelseexbonus, eval=FALSE>>=
result <- if(rnorm(1)>2) "unlikely" else "probable"

result <- replicate(n=1000, expr=
             if(rnorm(1)>2) "unlikely" else "probable")
table(result)

result <- ifelse(rnorm(1000)>2, "unlikely", "probable")
table(result)
@
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{Notes on logical values}
\begin{itemize}[<+->]
\item as you might have seen in \rcode{read.table(header=T)}, logical values (TRUE, FALSE) can be abbreviated.
\item If you want to play a mean prank on someone, write\\ \rcode{T <- FALSE; F <- TRUE} in their \href{https://rclickhandbuch.wordpress.com/install-r/rprofile/}{Rprofile} (see \rcode{?Startup}).
\item Logical (boolean) values F and T internally are often converted to integers 0 and 1, thus \rcode{sum(c(T,F,F,T,T,T,F,F,T))} is the number of TRUEs in a vector, \rcode{mean} yields the proportion of TRUEs.
\item \rcode{which(logicalVec)} gives the indices (positions) of TRUE values.
\item \rcode{Vec[logicalVec]} returns only the values of vec corresponding to TRUE in logicalVec (No need to wrap it into \rcode{which}).
\item Logical operators: \rcode{!, \&, |, xor()} (not, and, or, exclusive or)
% \item \rcode{cat(T, letters[c(12,15,22,5)])}
\end{itemize}
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{Notes on conditional code execution}
\begin{itemize}[<+->]
\item \rcode{\alert{if}(c)\{ex1\}} is valid code, thus R doesn't expect \alert{else} anymore.
\item If you execute code line by line (in a script, for example), \alert{\}} and \alert{else} must be on the same line.
\item Many people consider it good practice to do this in functions as well, but for machine-readability, it is technically fine to write\\
\texttt{\alert{if}(cond)\\
~~\{\\
~~ex1a\\
~~ex1b\\
~~\} \\
\alert{else}\\
~~ex2}
\item \rcode{\alert{if}(logicalValue==TRUE) ...} is usually unnecessary, you can write\\
\onslide<+-> \rcode{\alert{if}(logicalValue) ...}, but sometimes,\\
\onslide<+->  \rcode{\alert{if}(isTRUE(logicalValue)) ...} helps to deal with NAs.
% \item \rcode{cat(T, letters[c(12,15,22,5)])}
\end{itemize}
\end{frame}

%------------------------------------------------------------%

\begin{frame}{Actual usage of if else statements}
See the \rcode{hist} source code: \\
\href{https://github.com/wch/r-source/blob/trunk/src/library/graphics/R/hist.R}{github.com/wch/r-source ~ -> ~ src / library / graphics / R / hist.R}\\[1em]
\pause
<<mad, eval=F>>=
mad
@
\pause
Multiple nested conditionals\\
\texttt{\alert{if}(a) b \alert{else} \alert{if}(c) d \alert{else} e}\\
can be avoided with \rcode{switch}.
\end{frame}

\fi % commenting out Conditions section
%------------------------------------------------------------%
%------------------------------------------------------------%
\section{For loops}
%------------------------------------------------------------%
%------------------------------------------------------------%

\begin{frame}[fragile]{For loops}
Execute a block of code several times, with different input values.\\
Syntax: ~ \texttt{\alert{for}(aRunningVariable \alert{in} aSequence)\{ doSomething \}}
\pause
Often, i (for index) is used, thus ~~ \texttt{\alert{for}(i \alert{in} 1:n) \rcode{doThis}(i)}
\pause
<<for1, echo=T, eval=F>>=
help("for") # needs quotation marks!
@
\pause
<<for_print, eval=F>>=
print(1:2)
print(1:5)
print(1:9)
@
\pause
This is easier and less prone to human errors with:
\pause
<<for2, echo=T, eval=TRUE, tidy=FALSE>>=
for(i in c(2,5,9) ) { print(1:i) }
@
\end{frame}


%------------------------------------------------------------%

\begin{frame}[fragile]{For loops: fill a vector}
<<for6>>=
v <- vector(mode="numeric", length=20)
v
@
\pause \vspace{-1em}
<<for6b>>=
for(i in 3:17)  {  v[i] <- (i+2)^2  }
@
\pause \vspace{-1em}
<<for6b2, echo=2>>=
options(width=40)
v # this code was executed once for each i
options(width=50)
@
\pause \vspace{-0.5em}
In R, \rcode{for} loops are slow. Always try to vectorize (the best option, not always possible) or use \rcode{lapply} (saves you the initiation of the empty vector, easier to parallize).
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{For loops: execute code multiple times I}
\hspace{5em} $y = f(x, n) = \frac{12.5*n}{(n-1)!}*(\frac{n x}{8})^{(n-1)}*e^{-\frac{n x}{8}}$
<<for3a, echo=F, size="footnotesize">>=
par(mar=c(3,3,1,1), mgp=c(2,0.8,0), las=1)
x <- seq(0,20,0.1)
plot(x, 12.5*10/factorial(10-1)*(x/8*10)^(10-1)*exp(-x/8*10),
     ylab="y  =  f(x, n=10)", type="l", lwd=2)
@

\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{For loops: execute code multiple times II}
\textblockrulecolour{red}
<<for3, echo=-1, size="footnotesize">>=
par(mar=c(3,3,1,1), mgp=c(2,0.8,0), las=1)
x <- seq(0,25,0.1)
plot(x,x, type="n", ylab="y = f(x,n)")
lines(x, 12.5*5/factorial(5-1)*(x/8*5)^(5-1)*exp(-x/8*5), col=2)
lines(x, 12.5*6/factorial(6-1)*(x/8*6)^(6-1)*exp(-x/8*6), col=2)
@
\only<2>{
\begin{textblock*}{0.2cm}(2.6cm,2.2cm)
\vspace{0.9cm} ~
\end{textblock*}
%
\begin{textblock*}{0.2cm}(4.6cm,2.2cm)
\vspace{0.9cm} ~
\end{textblock*}
%
\begin{textblock*}{0.2cm}(6.27cm,2.2cm)
\vspace{0.9cm} ~
\end{textblock*}
%
\begin{textblock*}{0.2cm}(6.93cm,2.2cm)
\vspace{0.9cm} ~
\end{textblock*}
%
\begin{textblock*}{0.2cm}(9.25cm,2.2cm)
\vspace{0.9cm} ~
\end{textblock*}
%
}
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{For loops: execute code multiple times III}
<<for5, echo=-1, size="footnotesize">>=
par(mar=c(3,3,1,1), mgp=c(2,0.8,0), las=1)
x <- seq(0,25,0.1)
plot(x,x, type="n", ylab="y = f(x,n)")
for (n in 5:25)
lines(x, 12.5*n/factorial(n-1)*(x/8*n)^(n-1)*exp(-x/8*n), col=2)
@
\begin{textblock*}{0.2cm}(2.6cm,2.65cm)
\vspace{0.45cm} ~
\end{textblock*}
%
\begin{textblock*}{0.2cm}(4.6cm,2.65cm)
\vspace{0.45cm} ~
\end{textblock*}
%
\begin{textblock*}{0.2cm}(6.27cm,2.65cm)
\vspace{0.45cm} ~
\end{textblock*}
%
\begin{textblock*}{0.2cm}(6.93cm,2.65cm)
\vspace{0.45cm} ~
\end{textblock*}
%
\begin{textblock*}{0.2cm}(9.25cm,2.65cm)
\vspace{0.45cm} ~
\end{textblock*}
%
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{for loops shouldn't grow a vector}
Bad practice - R needs to recreate the vector each time:
<<for_loop_init1, eval=FALSE, size="small">>=
output <- NA
for(column in 1:5) output[column] <- median(iris[ ,column])
@
\pause
This internally does the same thing as:
<<for_loop_init2, eval=FALSE, size="small">>=
output <- vector(mode="numeric", length=0)
for(column in 1:5) output <- c(output, median(iris[ ,column])  )
@
\pause
Good practice - first tell R how big the output will be, so it can be adequately allocated in memory:
<<for_loop_init3, eval=FALSE, size="small">>=
output <- vector(mode="numeric", length=5)
for(column in 1:5) output[column] <- median(iris[ ,column])
@
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{for loops exercise}
\begin{exercise}{for loops in file creation}
\scriptsize
We'll write many datasets to disc (and read them back).
\begin{enumerate}
\item With \rcode{paste0}, print a filename of the structure "mydata\_123.txt" 
      using the name, the number and the file ending as inputs. 
      We'll be changing the number later in a loop.
\item Print a data.frame with two columns, each with 10 random numbers: 
      one column from the normal, one from the exponential distribution
\item With \rcode{write.table}, write such a table to a file in a subfolder (remember \rcode{dir.create}), 
      using the number of rows (e.g. 10) in the filename.\\
\item BONUS: change the arguments so that row numbers and quotation marks are not printed and tabstops are used for column separation.
\item With a \rcode{for}-loop, now write files for different sample sizes, e.g. 10, 20, 50, 100, 500.
\item Using the output of \rcode{dir()}, read all the files into a list of data.frames.
      Remember to first create an empty list of the right length.
\item BONUS: name the list elements according to the filenames. 
\item BONUS: now replace the whole construct with an \rcode{lapply} loop. 
      Celebrate how much nicer your code looks. 
      Check how you can get element names with \rcode{sapply(..., simplify=FALSE)}
\item BONUS: With \rcode{unlink}, delete the files from this exercise. 
      This function is vectorizable, so there's no need to do this in a for loop!
\end{enumerate}
\end{exercise}
\normalsize
\end{frame}

%------------------------------------------------------------%

% \begin{frame}[fragile]{Recap \alert{for} loop}
% \pause
% With \rcode{rexp(n, rate)}, random numbers can be generated from the exponential distribution.\\
% With \rcode{paste0("someText\_", 1)}, character strings and numbers can be concatenated.\\ 
% With \rcode{write.table(x, file)}, data can be written to a file.\\
% Using a \alert{for} loop, write three datasets to separate .txt files with 5, 20 and 100 exponentially distributed random numbers.\\
% BONUS: format the file nicely with the \rcode{write.table()} options. 
% \pause
% <<recapfor, size="small">>=
% for(n in c(5,20,100)) 
%   write.table(rexp(n), file=paste0("random_", n, ".txt"))
% @
% \end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{for loops exercise solution}
<<forloops_file_writing, eval=FALSE, size="footnotesize">>=
dir.create("loopexercise")
for(n in c(10,20,50,100,500)) 
    write.table(x=data.frame(norm=rnorm(n), exp=rexp(n)), 
                file=paste0("loopexercise/randomdata_", n, ".txt"),
                quote=F, row.names=F, sep="\t")

fnames <- dir("loopexercise", full=TRUE)
fcontents <- vector("list", length=length(fnames))
for(fnum in seq_along(fnames)) 
   fcontents[[fnum]] <- read.table(fnames[fnum], header=TRUE)

flist <- sapply(dir("loopexercise", full=TRUE), read.table, header=TRUE, 
                simplify=FALSE)

unlink(paste0("loopexercise/randomdata_", c(10,20,50,100,500), ".txt"))
@
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{\rcode{seq\_along(n)} is safer than \rcode{1:n} in \alert{for} loops}
\pause
\vspace{-0.5em}
<<seq_along0, size="scriptsize">>=
do_something <- function(x) if(x<1) stop("x must be >=1, not:", x) else x
something <- 1:6
@
\pause
You'll often see the dangerous code \rcode{\alert{for}(i in 1:n)}: \vspace{-0.7em}
<<seq_along1, size="footnotesize">>=
for(i in 1:length(something)) do_something(i) # works with current sth
@
\pause
Imagine this:\vspace{-0.5em}
<<seq_along2, size="footnotesize">>=
something <- which(letters=="4")
for(i in 1:length(something)) do_something(i) # fails! (same code!)
@
\pause
Safer to use is:\vspace{-0.7em}
<<seq_along3>>=
for(i in seq_along(something)) do_something(i)
@
\pause
Because:\vspace{-0.5em}
<<seq_along4, size="scriptsize">>=
1:length(something)     ;   seq_along(something)
@
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{stocks data from \href{http://finance.yahoo.com}{finance.yahoo.com}}
<<stocks_datapreparation, size="scriptsize", eval=F>>=
# Download current datasets:
if(!requireNamespace("quantmod")) install.packages("quantmod")
if(!requireNamespace("pbapply"))  install.packages("pbapply")
dummy <- pbapply::pblapply(c("F","VLKAF", "AMZN","AAPL","GOOG","MSFT"),
   function(x) zoo::write.zoo(x=quantmod::getSymbols(x, auto.assign=FALSE)[,6],
                           file=paste0("data/finance/",x,".txt"), col.names=T))

# read single files to R and merge into one file:
stocks <- lapply(dir("data/finance", full=TRUE),
                  read.table, as.is=TRUE, header=TRUE)
stocks <- Reduce(function(...) merge(..., all=T), stocks)

# Get nicer column names:
names <- sapply(strsplit(colnames(stocks), ".", fix=TRUE),"[", 1)
colnames(stocks) <- c(Index="Date", F="FORD", VLKAF="VOLKSWAGEN",
         AMZN="AMAZON", AAPL="APPLE", GOOG="GOOGLE", MSFT="MICROSOFT")[names]

# Save to disc:
write.table(stocks, file="data/stocks.txt", row.names=F, quote=F)
@
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{For loops: multipanel graphics: the task}
\begin{exercise}{for loop}
\begin{enumerate}
\item Read \datalinkText{stocks.txt}, so that there are no factors in the data.frame
\item Change the first column type from \texttt{char} to \texttt{date} with \rcode{?as.Date}
\item What do you get with \rcode{plot(stocks[ ,1:2])}? Make it a line graph.
\item With \rcode{par(mfrow...}, set up a two by three panel plot
\item With a for loop, fill those with each stock time series
\item BONUS 1: Make good annotations, including a main title (par oma, \rcode{mtext} with the outer argument)
\item BONUS 2: Make the plot margins smaller (par mar), turn y axis labels upright (las) and move the axis labels closer to the plots (mgp).
\item BONUS 3: Understand and comment each line of the data preparation. %Get your own files or use mine: \footnotesize{\datalinkBlob{finance/AAPL.txt}, \datalinkBlob{finance/AMZN.txt}, \datalinkBlob{finance/F.txt}, \datalinkBlob{finance/GOOG.txt}, \datalinkBlob{finance/VLKAY.txt}, \datalinkBlob{finance/YHOO.txt}}
\end{enumerate}
\end{exercise}
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{For loops: multipanel graphics: the solution}
\vspace{-1em}
<<forpanel, size="footnotesize", fig.height=2.8>>=
stocks <- read.table("data/stocks.txt", header=T, as.is=T)
stocks$Date <- as.Date(stocks$Date)
par(mfrow=c(2,3), mar=c(2,4,1,1), mgp=c(2.5,0.7,0),oma=c(0,0,2,0),las=1)
for(i in 2:7) plot(stocks[ ,c(1,i)], type="l")
mtext("stocks this decade", line=0, outer=TRUE)
@
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{For loops: multipanel graphics: beautifuller}
\vspace{-1em}
<<forpanel2, size="scriptsize", fig.height=2.5>>=
par(mfrow=c(1,2), mar=c(4,4,2,0.1), mgp=c(2.5,0.7,0), cex=0.7, las=1)
for(i in 2:3)
 {
 plot(stocks[ stocks$Date>as.Date("2016-04-01") , c(1,i) ],
      main=colnames(stocks)[i], xaxt="n", type="l", xlab=" ",
      ylab=if(i==2) "Adjusted daily share price  [USD]" else "")
 berryFunctions::monthAxis(1)
 }
@
\end{frame}

\iffalse % commenting out lapply section
%------------------------------------------------------------%
%------------------------------------------------------------%
\section{lapply}
%------------------------------------------------------------%
%------------------------------------------------------------%

\begin{frame}[fragile]{for -> lapply I: basics}
\vspace{-1em}
<<for_lapply1, eval=FALSE>>=
files <- dir("../rawdata", pattern="*.csv", full=TRUE)

#
@
\pause \vspace{-2.7em}
<<for_lapply2, eval=FALSE>>=
# bad and slow way:
ldfs <- list() # initiate empty list
for(i in 1:length(files))
   ldfs[[i]] <- read.csv(files[i], as.is=TRUE)

#
@
\pause \vspace{-2.7em}
<<for_lapply3, eval=FALSE>>=
# much better way: apply function to each file
ldfs <- lapply(X=files, FUN=read.csv, as.is=TRUE)

#
@
\pause \vspace{-2.7em}
<<for_lapply4, eval=FALSE>>=
# single data.frame if all files have n columns:
df <- do.call(rbind, ldfs)

#
@
\pause \vspace{-2.7em}
<<for_lapply5, eval=FALSE>>=
# PS: much faster in this example could be
library("data.table") # fread + rbindlist
ldfs <- lapply(X=files, FUN=fread, sep=",")
df <- rbindlist(ldfs)
@
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{for -> lapply II: progress bar, names, indexing etc}
\vspace{-0.6em}
<<for_lapply6, eval=FALSE>>=
ldfs <-   lapply(X=files, FUN=read.csv, as.is=TRUE)

#
@
\pause \vspace{-3.48em}
<<for_lapply7, eval=FALSE>>=
# progress bar with remaining time
library("pbapply")
ldfs <- pblapply(X=files, FUN=read.csv, as.is=TRUE)

#
@
\pause \vspace{-3.48em}
<<for_lapply8, eval=FALSE>>=
# nice additional stuff:
names(ldfs) <- files
str(ldfs, max.level=1)
ldfs[[2]] # second list element

#
@
\pause \vspace{-3.58em}
<<for_lapply9, eval=FALSE>>=
# get third column / fifth row from each df:
sapply(ldfs, "[",  , j=3)
sapply(ldfs, "[", 5,    )
@
\end{frame}

\fi % commenting out lapply section
%------------------------------------------------------------%
%------------------------------------------------------------%
\section{Functions}
%------------------------------------------------------------%
%------------------------------------------------------------%

\begin{frame}[fragile]{Functions I}
\label{functions1}
\href{http://r4ds.had.co.nz/functions.html}{http://r4ds.had.co.nz/functions.html}\\
\pause
\rcode{?"function"}\\
\pause  Syntax:\\
\rcode{Functionobjectname <- \alert{function}(argument1, argument2, ...) \\
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\{"DoSomething"\}}\\
\pause
<<funct2, echo=T, eval=T, tidy=FALSE>>=
myfunct <- function(grappig)
       {plot(grappig, type="l"); return(grappig*7)  }
@
\pause
After \rcode{return()}ing, the execution of the function is terminated, so it should only be positioned at the end. It can also be left away, the last instruction ("expression") will then be returned.
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{Functions II}
<<funct3>>=
myfunct(   c(5,11,3,7)  )
@
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{Functions with more arguments}
<<funct4, size="small", echo=-1>>=
par(mar=c(4,5,1,1), mgp=c(2.8,0.8,0))
myfunct <- function(x, type="o", ...) plot(x, type=type, ...)
# type="o" is now the default, thus used unless specified
# The ellipsis (...) passes arguments to other functions
myfunct(  c(5,11,3,7) , col="red", las=1)
@
\vspace{-2em}
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{Functions: example I}
If you needed to find the zeros of quadratic functions very often, you could use
<<funct5, echo=T, eval=T, tidy=FALSE>>=
pq <- function(p,q) # y = x^2 + px + q
              {
              w <- sqrt( p^2 / 4 - q )
              c(-p/2-w, -p/2+w)
              } # End of function

pq(3, -12)
@
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{Functions: example II}
<<pqfunplot>>=
x <- seq(-10, 10, len=100)
plot(x,  x^2 +3*x -12, type="l", col=2)
abline(h=0, v=0)
@
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{Exercise: add circles with given radius}
<<circlebasics, echo=-1, fig.height=2.1, fig.width=2.5, out.width="0.4\\textwidth">>=
par(mar=c(2,2,1,1), las=1)
plot(1:10, asp=1) # aspect ratio y/x of graph range
grid(col=1) # the next part sould go into a function:
x <- 8 ;  y <- 6 ;  r <-2
p <- seq(0, 2*pi, len=50)
cx <- x+r*cos(p) ;  cy <- y+r*sin(p)
polygon(cx, cy)
@
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{Time to practice programming}
\begin{exercise}{Writing functions} %ex
Write a function that
\begin{enumerate}
  \item - draws a circle with a certain radius at user-specified locations of an existing plot (see last slide).
  \item - uses ellipsis to allow the user to customize the appearance
  \item - checks all the arguments and gives useful warnings if the wrong type of input is provided
  \item - has useful explanations for each argument (documentation)
  \item - has readable indentation, spacing and comments explaining the code
  \item Now let your neighbor use it without explaining how it is to be used (this should be inferred from the code and comments!)
  \item Use your neighbor's function with a vector to draw several circles at once. (unintended use?) What happens?
\end{enumerate}
\end{exercise}
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]
<<exfunsola, size="scriptsize">>=
# Small helper function drawing circles into existing graphics
# Berry Boessenkool, berry-b@gmx.de, 2012
circle <- function(
  x, # x-coordinate of points, numeric value of length 1
  y, # ditto for y
  r, # radius of the circle, in the graphic's units
  locnum=100, # number of points on circle (more means smoother but slower)
  ...) # Further Arguments passed to polygon, like col, border, lwd
 {
 # input checking - only one circle can be drawn:
 if(length(x) >1 | length(y) >1 | length(r) >1 | length(locnum) >1)
   {
   warning("Only the first element of the vectors is used.")
   x <- x[1]; y <- y[1]; r <- r[1]; locnum <- locnum[1]
   }
 # input checking - is every value numeric?
 if(!is.numeric(x)) stop("x must be numeric, not ", class(x))
 if(!is.numeric(y)) stop("y must be numeric, not ", class(y))
 if(!is.numeric(r)) stop("r must be numeric, not ", class(r))
 # prepare circle line coordinates:
 cx <- x+r*cos( seq(0,2*pi,len=locnum) )
 cy <- y+r*sin( seq(0,2*pi,len=locnum) )
 polygon(cx, cy, ...) # actually draw it
 }
# Note: if circles look like ellipsis, use plot(... asp=1)
@
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{Solution for exercise \arabic{exercisecount} II: functions}
<<exfunsolb, echo=-1>>=
par(mar=c(3,3,0,0), las=1)
plot(1:20, type="n", asp=1, cex=2)
circle(5,5, r=3)
circle(15,10, r=4, locnum=12, col=2, border=4, lwd=3)
@
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{Solution for exercise \arabic{exercisecount} III: functions}
<<exfunsolc, echo=-1, size="scriptsize", out.width='0.65\\textwidth'>>=
par(mar=c(3,3,0,0), las=1, cex=2)  ; plot(1:20, type="n")
# can not be vectorized:
x <- sample(1:20, 15) ;  y <- sample(1:20, 15) ; r <- runif(20)*4
circle(x,y,r, col=rgb(1,0.5,0,alpha=0.4), border=NA)
for(i in 1:15) circle(x[i],y[i],r[i], col=rgb(1,0.5,0,alpha=0.4), border=NA)
@
\end{frame}

\iffalse % commenting out R packages section
%------------------------------------------------------------%

\section{Writing R packages}

%------------------------------------------------------------%

\begin{frame}{Why you should write R packages}
\pause
\begin{itemize}[<+->]
\item Collect your own functions in one place
\item Combine functions and documentation in the right way
\item Share code with others
\item Make your research reproducible !
\end{itemize}
\onslide<+->
\vspace{1em}
Good introduction at \datalinkText{packdev.R}
\end{frame}

\fi % commenting out R packages section
%------------------------------------------------------------%


\section{Debugging}

% ---------------------------

\begin{frame}[fragile]{Debugging}
\begin{itemize}[<+->]
\item Your code throws an error.
You didn't call the mentioned function.
Obviously, your code calls some function calling some function calling some function calling [you get the idea] which in the end creates an error.
To trace back this path, you can use \rcode{traceback()}.

\item Now that you know where the error originates from, you set \rcode{options(error=recover)}.
You run your code again, but this time R waits at the level creating an error.
You examine the environment within the function, play around with the objects and internal function code, until the bug has been fixed.
You have just debugged a function.

\item You want to step into the function you are developing at a specific point.
You add \rcode{browser()} at that point of the code.
You want to go line by line in one specific function. You set \rcode{debug(thatFunction)}.

\item You want to learn about lexical scoping (Where does R find variables?).\\
\small
\href{http://trestletech.com/2013/04/package-wide-variablescache-in-r-package/}{http://trestletech.com/2013/04/package-wide-variablescache-in-r-package/}
\href{http://adv-r.had.co.nz/Environments.html}{http://adv-r.had.co.nz/Environments.html}
\end{itemize}
\end{frame}

% ---------------------------

\begin{frame}[fragile]{Debugging: useful functions}
\begin{tabular}{ll}
\pause source("projectFuns.R") & execute complete file\\
\pause traceback() & find error source in sequence of function calls\\
\pause options(warn=2) & warnings to error. default 0\\
\pause browser() & go into function environment: \rcode{n}, \rcode{s}, \rcode{f}, \rcode{c}, \rcode{Q}\\
\pause \alert{options(error=recover)} & \alert{open interactive session where error occurred}\\
\pause debug(funct) & toggle linewise function execution\\
\pause undebug(funct) & after calling and fixing funct\\
\end{tabular}\\
\pause
\vspace{-0.5em}
<<stopfun, eval=F, size="footnotesize">>=
if(length(input)>1) stop("length must be 1, not ", length(input))
@
\vspace{-1em}
\pause
\rcode{stop}: Interrupts function execution and gives error\\
\rcode{warning}: continues but gives warning\\
\rcode{message}: to inform instead of worry the user\\[1em]
\pause
\href{http://www.biostat.jhsph.edu/~rpeng/docs/R-debug-tools.pdf}{R. Peng (2002): Interactive Debugging Tools in R}\\
\href{https://www.stats.umanitoba.ca/files/statsweb/2011/03/debugging.pdf}{D. Murdoch (2010): Debugging in R}\\
\href{http://adv-r.had.co.nz/Exceptions-Debugging.html}{H. Wickham (2015): Advanced R: debugging}\\
Example: \href{https://www.r-bloggers.com/tracking-down-errors-in-r/}{Pete Werner Blog Post (2013)}
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{Practice debugging, \datalinkText{lsc\_functions.R}}
\begin{exercise}{Debugging}
\begin{enumerate}
\item Load your package and the datasets. Correct the functions until\\
\rcode{lsc(calib\$P, calib\$Q, area=1.6)} returns the result below.
\item BONUS: commit each change to git.
\end{enumerate}
\end{exercise}

<<PQ_lsc, echo=F, warning=F, fig.height=2.8>>=
qpfile <- system.file("extdata/Q_P.txt", package="berryFunctions")
qp <- read.table(qpfile, sep="\t", dec=",", header=TRUE)
calib <- qp[1:90, ]
valid <- qp[-(1:90), ]
lsc_cal <- berryFunctions::lsc(calib$P, calib$Q, area=1.6)
@
\end{frame}

%------------------------------------------------------------%

\begin{frame}[fragile]{Solution for exercise \arabic{exercisecount}: Debugging}
\begin{itemize}
\item \rcode{stupid error you can easily remove} - traceback - find location of error - lsc\#73 - just comment it out
\item \rcode{harder to find but still stupid} - traceback - nse\#11 - ditto
\item \rcode{Error in plot: need finite 'ylim' value} - debug/browser/options(error=recover) - lsc\#105 - NAs in Q - range(Q, na.rm=TRUE) - also in other applicable locations
\item \rcode{There were 50 or more warnings} - come from rmse being called in optimization - add argument quietNA (or similar) to lsc that is passed to rmse in lsc\#79
\end{itemize}
\end{frame}

%------------------------------------------------------------%
%------------------------------------------------------------%
\section{Feedback}
%------------------------------------------------------------%
%------------------------------------------------------------%

\begin{frame}{Feedback}
\center{
Please fill out the feedback form at\\[1em]
\href{https://bit.ly/feedbackR}{bit.ly/feedbackR}\\[1em]
(it only takes a few minutes and helps to improve the course)\\[1em]
Thanks!\\[1em]
}
\end{frame}

%------------------------------------------------------------%
%------------------------------------------------------------%
\end{document}
%------------------------------------------------------------%
%------------------------------------------------------------%

